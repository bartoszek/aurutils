#!/bin/bash
# aur-chroot - build packages with systemd-nspawn
set -o errexit
readonly argv0=chroot
readonly PATH=/bin:/usr/bin
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

machine=$(uname -m)
readonly machine

# default arguments
directory=/var/lib/aurbuild/$machine
makechrootpkg_args=(-cu)
makechrootpkg_bindmounts_ro=()
bindmounts_ro=()

# default options
prepare=1 build=1

get_conf_repo() {
    printf '[%s]\n' "$1"
    pacconf --repo "$1"
}

get_file_server() {
    pacini --section="$1" "$2" Server
}

trap_exit() {
    if ! [[ -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    printf >&2 'usage: %s [-CDM <path>] [-d <repo>] [-BP] -- <makechrootpkg args>' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/parseopts.sh

opt_short='d:r:C:D:M:'
opt_long=('nobuild' 'noprepare')
if ! parseopts "$opt_short" "${opt_long[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

# FIXME: add --sysroot to set pacconf host, see pacutils-sysroot(7)
unset pacman_conf makepkg_conf host_repo server
while true; do
    case "$1" in
        -d) shift; host_repo+=("$1") ;;
        -D) shift; directory=$1 ;;
        -C) shift; pacman_conf=$1 ;;
        -M) shift; makepkg_conf=$1 ;;
        --nobuild) build=0 ;;
        --noprepare) prepare=0 ;;
        --) shift; break ;;
    esac
    shift
done
unset opt_short opt_long OPTRET

tmp=$(mktemp -d)
trap 'trap_exit' EXIT

# reset default makechrootpkg arguments
if (($#)); then
    makechrootpkg_args=("$@")
fi

# detect multilib package
readonly is_pacman_conf_multilib=$(
    for pkg in $(source PKGBUILD 2>/dev/null; echo ${depends[@]})
        do expac -S %r $pkg
    done|grep -q multilib
    echo $?
)
# set pacman_conf_default
pacman_conf_default="/usr/share/devtools/pacman-$(((is_pacman_conf_multilib)) && echo "extra" || echo "multilib").conf"

# baseline configuration
readonly pacman_conf=${pacman_conf-${pacman_conf_default}}
readonly makepkg_conf=${makepkg_conf-/usr/share/devtools/makepkg-$machine.conf}

for repo in "${host_repo[@]}"; do
    get_conf_repo "$repo"
done > "$tmp"/custom.conf

for repo in "${host_repo[@]}"; do
    # FIXME: custom.conf may contain multiple file:// entries per local repo
    # the '|| true' is to not exit when no file servers are available
    server=$(get_file_server "$repo" "$tmp"/custom.conf | grep -Em1 '^file://' || true)
    server=${server#file://}

    # arch-nspawn only supports specifying a single CacheDir via -c
    if [[ -n $server ]]; then
        bindmounts_ro+=("--bind-ro=$server")
        makechrootpkg_bindmounts_ro+=(-D "$server")
    fi
done

if ((prepare)); then
    # do not print DBPath (#412)
    pacconf --config="$pacman_conf" --raw | cat - "$tmp"/custom.conf > "$tmp"/pacman.conf

    # NOTE: CacheDir specified here will be replaced by devtools (#416)
    ed -s "$tmp"/pacman.conf <<< $'/[options]/r !pacconf --verbose CacheDir\nw'

    if [[ -f $directory/root/.arch-chroot ]]; then
        # locking is done by systemd-nspawn
        sudo arch-nspawn -C "$tmp"/pacman.conf -M "$makepkg_conf" \
             "$directory"/root "${bindmounts_ro[@]}" pacman -Syu --noconfirm
    else
        # parent path is not created by mkarchroot (#371)
        if [[ ! -d $directory ]]; then
            sudo install -d "$directory" -m 755 -v
        fi

        sudo mkarchroot -C "$tmp"/pacman.conf -M "$makepkg_conf" \
             "$directory"/root base-devel
    fi
fi

if ((build)); then
    sudo --preserve-env=GNUPGHOME,PKGDEST makechrootpkg -r "$directory" \
         "${makechrootpkg_bindmounts_ro[@]}" "${makechrootpkg_args[@]}"
else
    printf >&2 'container path: %q\n' "$directory"
    exit 0
fi

# vim: set et sw=4 sts=4 ft=sh:
