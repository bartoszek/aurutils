#!/bin/bash
# aur-search - search for AUR packages
set -o pipefail
readonly argv0=search
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default options
multiple=section
query_type=search
search_by=name-desc
sort_key=Name

tabulate() {
    # It is important to have a default value for every field, or
    # parsing of the @tsv result might break.
    # See: https://lists.gnu.org/archive/html/help-bash/2016-05/msg00041.html
    jq -r --arg key "$1" '
        def sel_join:
            select (length > 0) // ["-"] | join(" ");

        [.results[]] | sort_by(.[$key])[] | [
            .Name        // "-",
            .PackageBase // "-",
            .Version     // "-",
            .Description // "-",
            .URL         // "-",

            (.Keywords | sel_join),
            (.License  | sel_join),

            .Maintainer  // "-",
            .NumVotes    // "-",
            .Popularity  // "-",
            .OutOfDate   // "-",

            (.FirstSubmitted | todate),
            (.LastModified   | todate),
            (.Depends        | sel_join),
            (.MakeDepends    | sel_join),
            (.CheckDepends   | sel_join)
        ] | @tsv'
}


parse_long() {
    local -a desc=(
        'Name'
        'Base'
        'Version'
        'Description'
        'URL'
        'Keywords'
        'License'
        'Maintainer'
        'Votes'
        'Popularity'
        'Out Of Date'
        'Submitted'
        'Last Modified'
        'Depends On'
        'Makedepends'
        'Checkdepends'
    )
    local -a info

    while IFS=$'\t' read -r -a info; do
        for i in "${!info[@]}"; do
            printf "$BOLD%s:$ALL_OFF\t%s\n" "${desc[i]}" "${info[i]}"
        done

        # column(1) ignores empty lines (package delimitation)
        printf '%s\n' '-'
    done
}

parse_short() {
    local Name Version NumVotes Popularity Maintainer OutOfDate Description

    while IFS=$'\t' read -r Name _ Version Description _ _ _ Maintainer NumVotes Popularity OutOfDate _; do
        case $OutOfDate in
            -) unset OutOfDate ;;
            *) # FIXME move date command to jq (must only be run if
               # OutOfDate is set)
               OutOfDate="(Out-of-date: $(date -d @"$OutOfDate" '+%d %B %Y'))" ;;
        esac

        case $Maintainer in
            -) Maintainer='(Orphaned) ' ;;
            *) unset Maintainer ;;
        esac

        LC_NUMERIC=C printf -v Popularity '%.2f' "$Popularity"

        printf "${BLUE}aur/${ALL_OFF}${BOLD}%s ${GREEN}%s ${ALL_OFF}(+%s %s%%) ${RED}%s%s${ALL_OFF}\\n    %s\\n" \
               "$Name" "$Version" "$NumVotes" "$Popularity" "$Maintainer" "$OutOfDate" "$Description"
    done
}

usage() {
    printf >&2 'usage: %s: [-aisdmnqv] [-k key] package [package...]\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

opt_short='aisdmnqvk:'
opt_long=('any' 'info' 'search' 'desc' 'maintainer' 'name' 'depends'
          'makedepends' 'optdepends' 'checkdepends' 'key:')
if ! parseopts "$opt_short" "${opt_long[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset format
while true; do
    case "$1" in
        -a|--any)
            multiple=union ;;
        -i|--info)
            query_type=info ;;
        -s|--search)
            query_type=search ;;
        -d|--desc)
            search_by=name-desc ;;
        -m|--maintainer)
            search_by=maintainer ;;
        -n|--name)
            search_by=name ;;
        --depends)
            search_by=depends ;;
        --makedepends)
            search_by=makedepends ;;
        --optdepends)
            search_by=optdepends ;;
        --checkdepends)
            search_by=checkdepends ;;
        -q|--short)
            format=short ;;
        -v|--verbose)
            format=long ;;
        -k|--key)
            shift; sort_key=$1 ;;
        --)
            shift; break ;;
    esac
    shift
done
unset opt_short opt_long OPTRET

if ((!$#)); then
    usage
fi

# XXX union is done by the AUR for info type, but not search
if (($# < 2)) || [[ $query_type == info ]]; then
    multiple=none
fi

# set format depending on query type (#319)
case $query_type in
      info) format=${format-long}  ;;
    search) format=${format-short} ;;
esac

# set filters (1)
case $format in
     long) parse() { parse_long | column -ts $'\t' | sed -E 's/^-//; $d'; } ;;
    short) parse() { parse_short; } ;;
esac

# set filters (2)
case $multiple in
    section) combine() { sort | uniq -d; } ;;
      union) combine() { sort | uniq -u; } ;;
       none) combine() { tee; } ;;
esac

# pipeline
printf '%s\n' "$@" | aur rpc -t "$query_type" -b "$search_by" | tabulate "$sort_key" | combine | parse

# vim: set et sw=4 sts=4 ft=sh:
