#!/bin/bash
# aur-sync - download and build AUR packages automatically
[[ -v AUR_DEBUG ]] && set -o xtrace
set -o errexit
argv0=sync
XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
AURDEST=${AURDEST:-$XDG_CACHE_HOME/aurutils/$argv0}
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default arguments
fetch_args=(-L)
build_args=()
makechrootpkg_args=()
makechrootpkg_makepkg_args=()
makepkg_args=(--clean --syncdeps)
repo_args=()

# default options (enabled)
build=1 chkver_depth=2 download=1 view=1 provides=0 graph=1

# default options (disabled)
chroot=0 rotate=0 update=0

lib32() {
    awk -v arch="$(uname -m)" '{
        if(arch == "i686") {
            gsub(/^lib32-/,"")
            gsub(/^gcc-multilib$/,"")
        }
        print
    }'
}

# files: $1 pkgname\tpkgbase $2 pkgname (order by $2)
select_pkgbase() {
    awk 'NR == FNR {
        map[$1] = $2
        next
    }
    $1 in map {
        base = map[$1]

        # only print pkgbase on first occurence
        if (base in seen) {
            next
        } else {
            print base
            seen[base]
        }
    }' "$@"
}

# fields: $1 pkgname, $2 depends[<>=]
tr_ver() {
    awk -F'[<>=]' '{print $1}'
}

complement() {
    # empty set should not return 1
    grep -Fxvf "$@" || return $(( $? - 1 ))
}

order() {
    cut -f1,2 depends | tr_ver | tsort
}

trap_exit() {
    if [[ ! -v AUR_DEBUG ]]; then
        rm -rf "$tmp" "$tmp_view"
    else
        printf >&2 'AUR_DEBUG: %s: temporary files at %s\n' "$argv0" "$tmp"
        printf >&2 'AUR_DEBUG: %s: temporary files at %s\n' "$argv0" "$tmp_view"
    fi
}

usage() {
    plain 'usage: %s [-d repo] [-CDM path] [-AcfkLnpPsTu] [--] pkgname...' "$argv0" >&2
    exit 1
}

source /usr/share/makepkg/util/util.sh
source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ ! -v NO_COLOR ]] && [[ ! -v AUR_DEBUG ]]; then
    [[ -t 2 ]] && colorize
fi

# mollyguard for makepkg
if (( UID == 0 )) && [[ ! -v AUR_ASROOT ]]; then
    warning 'aur-%s is not meant to be run as root.' "$argv0"
    warning 'To proceed anyway, set the %s variable.' 'AUR_ASROOT'
    exit 1
fi

opt_short='B:C:d:D:M:AcfkLnpPrRsTu'
opt_long=('bind:' 'bind-rw:' 'database:' 'directory:' 'ignore:'
          'root:' 'makepkg-conf:' 'pacman-conf:' 'chroot' 'continue'
          'force' 'ignore-arch' 'log' 'no-confirm' 'no-ver' 'no-graph'
          'no-ver-shallow' 'no-view' 'print' 'provides' 'rm-deps'
          'sign' 'temp' 'upgrades' 'pkgver' 'rebuild' 'rebuild-tree'
          'build-command:' 'ignore-file:' 'remove' 'provides-from:')
opt_hidden=('dump-options' 'allan' 'ignorearch' 'ignorefile'
            'noconfirm' 'nover' 'nograph' 'nover-shallow' 'noview'
            'rebuildtree' 'rmdeps' 'rebase')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset pkg pkg_i repo repo_p ignore_file
while true; do
    case "$1" in
        -d|--database)
            shift; repo_args+=(-d "$1") ;;
        -B|--build-command)
            shift; build_args+=(-B "$1") ;;
        -D|--directory)
            shift; build_args+=(-D "$1") ;;
        -M|--makepkg-conf)
            shift; build_args+=(--makepkg-conf "$1") ;;
        -C|--pacman-conf)
            shift; build_args+=(--pacman-conf "$1") ;;
        --bind)
            shift; makechrootpkg_args+=(-D "$1") ;;
        --bind-rw)
            shift; makechrootpkg_args+=(-d "$1") ;;
        --ignore)
            shift; IFS=, read -a pkg -r <<< "$1"
            pkg_i+=("${pkg[@]}") ;;
        --ignorefile|--ignore-file)
            shift; ignore_file=$1 ;;
        --root)
            shift; repo_args+=(-r "$1") ;;
        -A|--ignorearch|--ignore-arch)
            makepkg_args+=(--ignorearch)
            makechrootpkg_makepkg_args+=(-A) ;;
        -c|--chroot)
            chroot=1; build_args+=(-c) ;;
        -f|--force)
            build_args+=(-f) ;;
        -L|--log)
            makepkg_args+=(--log) ;;
        -P|--provides)
            provides=1 ;;
        --provides-from)
            shift; IFS=, read -a repo -r <<< "$1"
            repo_p+=("${repo[@]}") ;;
        -n|--noconfirm|--no-confirm)
            makepkg_args+=(--noconfirm) ;;
        -p|--print)
            build=0 ;;
        -r|--rmdeps|--rm-deps)
            makepkg_args+=(--rmdeps) ;;
        -R|--remove)
            build_args+=(-R) ;;
        -s|--sign)
            build_args+=(-sv) ;;
        -T|--temp)
            makechrootpkg_args+=(-T) ;;
        -u|--upgrades)
            update=1 ;;
        --allan)
            rotate=1 ;;
        --continue)
            download=0 ;;
        --nograph|--no-graph)
            graph=0 ;;
        --nover|--no-ver)
            chkver_depth=0 ;;
        --nover-shallow|--no-ver-shallow)
            chkver_depth=1 ;;
        --noview|--no-view)
            view=0 ;;
        --pkgver)
            build_args+=(--pkgver) ;;
        --rebase)
            fetch_args+=(-R) ;;
        --rebuild)
            build_args+=(-f); chkver_depth=1 ;;
        --rebuildtree|--rebuild-tree)
            build_args+=(-f); chkver_depth=0 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}"
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

tmp=$(mktemp -d --tmpdir "aurutils-$argv0.XXXXXXXX") || exit
tmp_view=$(mktemp -d --tmpdir "aurutils-$argv0-view.XXXXXXXX") || exit
trap 'trap_exit' EXIT

# append contents of ignore file
if [[ -f ${ignore_file=$XDG_CONFIG_HOME/aurutils/sync/ignore} ]]; then
    while IFS="#" read -r i _; do pkg_i+=("$i"); done < "$ignore_file"
fi

if (( rotate )); then
    if { hash rot13 && target=$(aur pkglist | shuf -n 1); } 2>/dev/null; then
        exec bash -c "{ aur \"$argv0\" -c \"$target\" && repo-elephant | rot13; } 2>&1 | rot13"
    else
        echo '?'; exit 16 # EBUSY
    fi
fi

if ! (( $# + update )); then
    error '%s: no targets specified' "$argv0"
    exit 1
fi

mkdir -p "$AURDEST"
cd_safe "$tmp"

# retrieve path to local repo (#448)
aur repo "${repo_args[@]}" --list --status-file=db >db_info

{ IFS= read -r db_name
  IFS= read -r db_root
} <db

if [[ -w $db_root/$db_name.db ]]; then
    msg 'Using [%s] repository' "$db_name" >&2
else
    error '%s: %s: permission denied' "$argv0" "$db_root/$db_name.db"
    exit 13
fi

{ if (( $# )); then
      printf '%s\n' "$@"
  fi

  if (( update )); then
      aur vercmp --quiet <db_info
  fi
} >argv

if [[ -s argv ]]; then
    # shellcheck disable=SC2094
    # $1 pkgname $2 depends $3 pkgbase $4 pkgver
    xargs --arg-file=argv aur depends --table >depends
else
    plain "there is nothing to do" >&2
    exit
fi

# $1 pkgname $2 pkgbase $3 pkgver
cut -f2 --complement depends | sort -u >pkginfo

{ if (( ${#pkg_i[@]} )); then
      warning "$argv0: ignoring %s package" "${pkg_i[@]}"
      printf '%s\n' "${pkg_i[@]}"
  fi

  # packages with equal or newer versions are taken as complement
  # for the queue. if chkver_shallow is enabled, packages on the
  # command-line are excluded from this complement
  if (( chkver_depth )); then
      # note: AUR cannot be queried by pkgbase (FS#57230)
      cut -f1,3 pkginfo | aur vercmp -p db_info -c >current

      # shellcheck disable=SC2002
      case $chkver_depth in
          1) cat current | complement argv ;;
          2) cat current ;;
      esac
  fi

  # note: this uses pacman's copy of the repo (as used by makepkg -s)
  if (( ${#repo_p[@]} )); then
      cut -f1 pkginfo | complement argv | aur-repo-filter "${repo_p[@]/#/--database=}"
  elif (( provides )); then
      cut -f1 pkginfo | complement argv | aur repo-filter
  fi
} >filter

# pkgname queue (AUR + repos)
if order depends >queue_0; then
    tac queue_0 | lib32 | complement filter >queue_1
else
    # input contains a loop
    error '%s: invalid argument' "$argv0"
    exit 22
fi

# pkgbase queue (AUR)
cut -f1,2 pkginfo | select_pkgbase - queue_1 >queue

if [[ -s queue ]]; then
    cd_safe "$AURDEST"
else
    plain "there is nothing to do" >&2
    exit
fi

if (( download )); then
    msg "Retrieving package files" >&2
    parallel -Xj +3 --nice 10 --halt now,fail=1 --keep-order \
        aur fetch "${fetch_args[@]}" "$tmp_view" :::: "$tmp"/queue
fi

# link build files in the queue (absolute links)
parallel -X ln -s "$(pwd -P)"/{} "$tmp_view" :::: "$tmp"/queue

# Explicitly define if exit success is to be trusted (#561)
trust_exit_success=0

if type -P >/dev/null vifm; then
    # avoid directory prefix in printed paths (#452)
    viewer() ( cd "$1"; vifm -c 'view!' -c '0' - )
    trust_exit_success=1
else
    # shellcheck disable=SC2086
    viewer() ( cd "$1"; command -- ${PAGER:-less -K -+F} )

    # Trust our fallback
    if [[ -z $PAGER ]]; then
        trust_exit_success=1
    fi
fi

# check if dependency graph is valid
if (( graph )); then
    aur graph "$tmp_view"/*/.SRCINFO >/dev/null
fi

if (( view )); then
    # AUR_PAGER exit codes are respected by definition.
    if [[ -v AUR_PAGER ]]; then
        # shellcheck disable=SC2086
        command -- $AUR_PAGER "$tmp_view"
    else
        { # print patch files
          find "$tmp_view" -maxdepth 1 -type f

          # print build directories in dependency order
          xargs -I{} -a "$tmp"/queue find -L "$tmp_view"/{} -maxdepth 1
        } | viewer "$tmp_view"

        # ask for confirmation when viewer() exit success is not trusted (#530, #561)
        if ! (( trust_exit_success )); then
            read -rp $'Press Return to continue or Ctrl+d to abort\n'
        fi
    fi
    xargs -a "$tmp/queue" aur fetch "${fetch_args[@]}" --confirm-seen
fi

if (( build )); then
    build_args+=(--arg-file "$tmp"/queue --database "$db_name" --root "$db_root")

    if (( chroot )); then
        aur build "${build_args[@]}" -- "${makechrootpkg_args[@]}" \
            -- "${makechrootpkg_makepkg_args[@]}"
    else
        aur build "${build_args[@]}" -- "${makepkg_args[@]}"
    fi
else
    xargs -a "$tmp"/queue -I{} printf '%s\n' "$(pwd -P)"/{}
fi

# vim: set et sw=4 sts=4 ft=sh:
