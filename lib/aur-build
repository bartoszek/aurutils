#!/bin/bash
# aur-build - build packages to a local repository
set -o errexit
shopt -s extglob
readonly argv0=build
readonly startdir=$PWD
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default arguments
chroot_args=()
gpg_args=(--detach-sign --no-armor --batch)
makechrootpkg_args=(-cu)
makepkg_args=(-crs)
repo_add_args=()

# default options
chroot=0 no_sync=0 overwrite=0 sign_pkg=0

conf_repo() {
    printf '[options]\n'
    pacconf --options --raw

    printf '[%s]\n' "$1"
    pacconf --repo="$1"
}

db_replaces() {
    bsdcat "$1" | awk '/%REPLACES%/ {
        while(NF != 0) {getline; print}
    }'
}

print_quoted() {
    printf '%q\n' "$@"
}

trap_exit() {
    if ! [[ -o xtrace ]]; then
        rm -rf "$tmp" "$var_tmp"
    fi
}

usage() {
    plain "usage: $argv0 -d database [-afNRsv] [--] <makepkg args>"
    exit 1
}

source /usr/share/makepkg/util/util.sh
source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

tmp=$(mktemp -d "${TMPDIR:-/tmp}/$argv0".XXXXXXXX)
var_tmp=$(mktemp -d "${TMPDIR:-/var/tmp}/$argv0".XXXXXXXX)

trap 'trap_exit' EXIT
trap 'exit' INT

opt_short='a:d:r:C:D:M:cfNRsv'
opt_long=()
if ! parseopts "$opt_short" "${opt_long[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset database db_root queue
while true; do
    case "$1" in
        -a) shift; queue=$1 ;;
        -c) chroot=1 ;;
        -f) overwrite=1 ;;
        -N) no_sync=1 ;;
        -r) shift; db_root=$1 ;;
        -d) shift; database=$1
            chroot_args+=(-d "$1") ;;
        -C) shift; chroot_args+=(-C "$1") ;;
        -D) shift; chroot_args+=(-D "$1") ;;
        -M) shift; chroot_args+=(-M "$1") ;;
        -R) repo_add_args+=(-R) ;;
        -s) sign_pkg=1
            repo_add_args+=(-s) ;;
        -v) repo_add_args+=(-v) ;;
        --) shift; break ;;
    esac
    shift
done
unset opt_short opt_long OPTRET

if [[ ${database=$AUR_REPO} ]]; then
    server=$(pacconf --single --repo="$database" Server)
    server=${server#*//}
else
    error "$argv0: database: missing argument"
    usage
fi

db_root=$(realpath -e -- "${db_root-${AUR_DBROOT-$server}}")
db_path=$(realpath -e -- "${db_root}/$database.db") # .db symbolic link to archive

if ! [[ -r $db_path && -w $db_path ]]; then
    error "$argv0: $db_path: permission denied"
    exit 13
fi

if [[ -v queue ]]; then
    exec {fd}< "$queue"
else
    exec {fd}< <(printf '\n')
fi

# reset default makechrootpkg arguments
if (($#)); then
    if ((chroot)); then
        makechrootpkg_args=("$@")
    else
        makepkg_args=("$@")
    fi
fi

if type -P xdelta3 >/dev/null; then
    repo_add_args+=(-d)
fi

if ((sign_pkg)); then
    if [[ -v GPGKEY ]]; then
        gpg --list-keys "$GPGKEY"
        gpg_args+=(-u "$GPGKEY")
    fi
else
    db_sigs=("$db_root/$database"{,.files}.sig)

    if [[ -f ${db_sigs[0]} ]]; then
        # avoid errors from stale db.sig files
        error "$argv0: database signature found, but signing is disabled"

        print_quoted >&2 "${db_sigs[@]}"
        exit 1
    fi
fi

if ((chroot)); then
    aur chroot --nobuild "${chroot_args[@]}"
else
    conf_repo "$database" >"$tmp"/custom.conf
fi

while IFS= read -ru "$fd" path; do
    cd_safe "$startdir/$path"

    if ((!overwrite)); then
        unset mark

        while IFS= read -r; do
            [[ -f $REPLY ]] && mark+=("$REPLY")
        done < <(PKGDEST="$db_root" makepkg --packagelist)

        if [[ ${mark[*]} ]]; then
            warning "skipping built package (use -f to overwrite)"

            print_quoted >&2 "${mark[@]}"
            continue
        fi
    fi

    if ((chroot)); then
        printf '%s\n' >&2 "Running makechrootpkg ${makechrootpkg_args[*]}"
        PKGDEST="$var_tmp" aur chroot --noprepare "${chroot_args[@]}" \
            -- "${makechrootpkg_args[@]}"
    else
        printf '%s\n' >&2 "Running makepkg ${makepkg_args[*]}"
        PKGDEST="$var_tmp" makepkg "${makepkg_args[@]}"
    fi

    cd_safe "$var_tmp"
    pkglist=(./!(*.sig)) # discard makepkg --sign from package list (#410)
    siglist=()

    for p in "${pkglist[@]}"; do
        if [[ -f $p.sig ]]; then
            warning "$argv0: existing package signature found"
            siglist+=("$p".sig)

        elif ((sign_pkg)); then
            gpg "${gpg_args[@]}" --output "$p".sig "$p"
            siglist+=("$p".sig)
        fi
    done

    # move build products (relative paths)
    mv -bf "${pkglist[@]}" "${siglist[@]}" "$db_root"

    cd_safe "$db_root"
    LANG=C repo-add "${repo_add_args[@]}" "$db_path" "${pkglist[@]}"

    if ((chroot)) || ((no_sync)); then
        continue
    else
        replaces=$(grep -Fxf <(db_replaces "$db_path") <(pacman -Qq) | paste -s -d, -)

        sudo pacman -Fy  --config="$tmp"/custom.conf
        sudo pacman -Syu --config="$tmp"/custom.conf --ignore="$replaces" --noconfirm
    fi
done

exec {fd}<&-

# vim: set et sw=4 sts=4 ft=sh:
